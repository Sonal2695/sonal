					----model----


----------------Errorcodes--------

package Employeemodel;

public enum ErrorCodes {
	
	TRA1001("TRA1001"),
	TRA1002("TRA1002"),
	TRA1003("TRA1003"),
	TRA1004("TRA1004"),
	TRA1005("TRA1005"),
	TRA1006("TRA1006"),
	TRA1007("TRA1007");
	
	public String getErrorcode() {
		return errorcode;
	}

	private ErrorCodes(String errorcode) {
		this.errorcode = errorcode;
	}

	private String errorcode;
	

}


----------------Errors-----

package Employeemodel;

import org.springframework.stereotype.Component;

@Component
public class Errors {

	private String code;
	private String description;
	
	
	public Errors() {
		super();
		// TODO Auto-generated constructor stub
	}


	public String getCode() {
		return code;
	}


	public void setCode(String code) {
		this.code = code;
	}


	public String getDescription() {
		return description;
	}


	public void setDescription(String description) {
		this.description = description;
	}
	
	
}


---------metadata------

package Employeemodel;
import org.springframework.stereotype.Component;

@Component
public class Metadata {

	private boolean success;
	private String description;
	private String responseId;

	
	public Metadata() {
		super();
		// TODO Auto-generated constructor stub
	}

	public String getResponseId() {
		return responseId;
	}

	public void setResponseId(String responseId) {
		this.responseId = responseId;
	}

	public boolean getSuccess() {
		return success;
	}

	public void setSuccess(boolean success) {
		this.success = success;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Override
	public String toString() {
		return "Metadata [success=" + success + ", description=" + description + ", responseId=" + responseId + "]";
	}
		
}


------------Employee--------

package Employeemodel;

import java.sql.Date;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

@JsonIgnoreProperties(ignoreUnknown=true)
public class Employee {

	private int Emp_Id;
	private String Emp_name;
	private Date DOB;
	private String Designation;
	private int Dept_Id;
	
	
	
@JsonCreator
	public Employee(@JsonProperty("Emp_Id")int Emp_Id,
			@JsonProperty("Emp_name")String Emp_name,
			@JsonProperty("DOB")Date DOB,
			@JsonProperty("Designation")String Designation,
			@JsonProperty("Dept_Id")int Dept_Id) {
		super();
		this.Emp_Id = Emp_Id;
		this.Emp_name = Emp_name;
		this.DOB = DOB;
		this.Designation = Designation;
		this.Dept_Id = Dept_Id;
	;
	}
	
	public Employee() {
		super();
		// TODO Auto-generated constructor stub
	}

	
	public int getEmp_Id() {
		return Emp_Id;
	}

	public void setEmp_Id(int emp_Id) {
		Emp_Id = emp_Id;
	}

	public String getEmp_name() {
		return Emp_name;
	}

	public void setEmp_name(String emp_name) {
		Emp_name = emp_name;
	}

	public Date getDOB() {
		return DOB;
	}

	public void setDOB(Date dOB) {
		DOB = dOB;
	}

	public String getDesignation() {
		return Designation;
	}

	public void setDesignation(String designation) {
		Designation = designation;
	}

	public int getDept_Id() {
		return Dept_Id;
	}

	public void setDept_Id(int dept_Id) {
		Dept_Id = dept_Id;
	}


	@Override
	public String toString() {
		StringBuilder str=new StringBuilder();
		str.append("Emp_Id"+getEmp_Id());
		str.append("Emp_name"+getEmp_name());
		str.append("DOB"+getDOB());
		str.append("Designation"+getDesignation());
		str.append("Dept_Id"+getDept_Id());
		return str.toString();
	}
	
	
	
}






			--------model.reponse.wrapper-------



------EmployeeResult----

package Employeemodel.wrapper.response;

import Employeemodel.Metadata;

public interface EmployeeResult {
	
	public Metadata getMetadata();
	public void setMetadata(Metadata metadata);
	
}



----EmployeeResultData--

package Employeemodel.wrapper.response;
import java.util.ArrayList;
import java.util.List;
import org.springframework.stereotype.Component;
import Employeemodel.Employee;


@Component
public class EmployeeResultData {
	List<Employee> employee=new ArrayList<Employee>();

	public EmployeeResultData() {
		super();
		
	}

	public List<Employee> getEmployee() {
		return employee;
	}

	public void setEmployee(List<Employee> employee) {
		this.employee = employee;
	}

	@Override
	public String toString() {
		return "EmployeeResultData [employee=" + employee + "]";
	}

	
}


------FailureData ----

package Employeemodel.wrapper.response;
import org.springframework.stereotype.Component;

import Employeemodel.Errors;
import Employeemodel.Metadata;

@Component
public class FailureData implements EmployeeResult {
	
	private Metadata metadata;
	private Errors errors;
	
	

	public FailureData() {
		super();
		// TODO Auto-generated constructor stub
	}

	
	public FailureData(Metadata metadata, Errors errors) {
		super();
		this.metadata = metadata;
		this.errors = errors;
	}

	
	public Metadata getMetadata() {
		return metadata;
	}

	
	public void setMetadata(Metadata metadata) {
		this.metadata = metadata;
	}

	public Errors getErrors() {
		return errors;
	}

	public void setErrors(Errors errors) {
		this.errors = errors;
	}


	@Override
	public String toString() {
		return "FailureData [metadata=" + metadata + ", errors=" + errors + "]";
	}
	

}

-----successdata-----

package Employeemodel.wrapper.response;
import org.springframework.stereotype.Component;
import Employeemodel.Metadata;

@Component
public class SuccessData implements EmployeeResult {
	
	private Metadata metadata;
	private EmployeeResultData employeeResultData;
		
	public SuccessData() {
		super();
		// TODO Auto-generated constructor stub
	}
	
	
	public SuccessData(Metadata metadata, EmployeeResultData employeeResultData) {
		super();
		this.metadata = metadata;
		this.employeeResultData = employeeResultData;
	}



	public EmployeeResultData getEmployeeResultData() {
		return employeeResultData;
	}



	public void setEmployeeResultData(EmployeeResultData employeeResultData) {
		this.employeeResultData = employeeResultData;
	}


	public Metadata getMetadata() {
		return metadata;
	}
	
	
	public void setMetadata(Metadata metadata) {
		this.metadata = metadata;
	}


	@Override
	public String toString() {
		return "SuccessData [metadata=" + metadata + ", employeeResultData=" + employeeResultData + "]";
	}
	
	

}



					-----Dao----

package Employeedao;

import java.util.List;

import Employeemodel.Employee;

public interface EmployeeDao {
	
	public List<Employee> getUsers();
	public Employee getUser(int Emp_Id);
	public Employee insert(Employee employee);
	public Employee update(Employee employee);
	public Employee delete(int Emp_Id);
	

}


					----IDAO----


package Employeedao;

import java.util.List;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import Employeemodel.Employee;

@Repository
public class IEmployeeDao implements EmployeeDao {

	JdbcTemplate jdbcTemplate;
	
	@Autowired
	public void setDataSource(DataSource dataSource){
		this.jdbcTemplate=new JdbcTemplate(dataSource);
	}
	@Override
	public List<Employee> getUsers() {
		List<Employee> emp=null;
		try{
		emp=jdbcTemplate.query("select * from EMPLOYEE_XBBNMCM e,Department_XBBNMCM d where e.Dept_id=d.Dept_id ", new BeanPropertyRowMapper<Employee>(Employee.class));
		return emp;
		}
		catch(DataAccessException e){
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public Employee getUser(int Emp_Id) {
		Employee emp=null;
		try{
		emp=jdbcTemplate.queryForObject("select * from EMPLOYEE_XBBNMCM e,Department_XBBNMCM d where e.Dept_id=d.Dept_id and Emp_id=? ",new Object[]{Emp_Id}, new BeanPropertyRowMapper<Employee>(Employee.class));
		return emp;
		}
		catch(DataAccessException e){
			e.printStackTrace();
		}
		return null;
		}

	@Override
	public Employee insert(Employee emp) {
		try{
		int count=jdbcTemplate.update("insert into EMPLOYEE_XBBNMCM values(?,?,?,?,?) ",new Object[]{emp.getEmp_Id(),emp.getEmp_name(),emp.getDOB(),emp.getDesignation(),emp.getDept_Id()});
			return emp;
		}
		catch(DataAccessException e){
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public Employee update(Employee emp) {
		try{
			int count=jdbcTemplate.update("update EMPLOYEE_XBBNMCM set Emp_name=?,DOB=?,Designation=?, Dept_id=? where Emp_id=? ",new Object[]{emp.getEmp_name(),emp.getDOB(),emp.getDesignation(),emp.getDept_Id(),emp.getEmp_Id()});
			if(count==1)
				{
				return emp;
				}
			else{
				System.out.println("cannot be updated");
			}
			}
			catch(DataAccessException e){
				e.printStackTrace();
			}
			return null;
	}

	@Override
	public Employee delete(int Emp_Id) {
		Employee emp=null;
		try{
			emp=jdbcTemplate.queryForObject("select * from EMPLOYEE_XBBNMCM where Emp_id=? ",new Object[]{Emp_Id}, new BeanPropertyRowMapper<Employee>(Employee.class));
			int count=jdbcTemplate.update("delete from EMPLOYEE_XBBNMCM  where Emp_id=?",new Object[]{Emp_Id});
				if(count==1){
					return emp;
				}
			}
			catch(DataAccessException e){
				e.printStackTrace();
			}
			return null;
	}

}


					----service----

package Employeeservice;

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;

import Employeemodel.Employee;
import Employeemodel.wrapper.response.EmployeeResult;

public interface EmployeeService {
	
	public EmployeeResult getAllUsers();
	public EmployeeResult getAUser(@PathVariable int Emp_Id);
	public EmployeeResult update(@RequestBody Employee employee);
	public EmployeeResult insert(@RequestBody Employee employee);
	public EmployeeResult delete(@PathVariable int Emp_Id);
}



					----Iservice---

package Employeeservice;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import Employeedao.EmployeeDao;
import Employeemodel.Employee;
import Employeemodel.Errors;
import Employeemodel.Metadata;
import Employeemodel.wrapper.response.EmployeeResult;
import  Employeemodel.wrapper.response.EmployeeResultData;
import  Employeemodel.wrapper.response.FailureData;
import  Employeemodel.wrapper.response.SuccessData;

@Service
public class EmployeeServiceImpl implements EmployeeService {
	
	@Autowired
	EmployeeDao dao;
	
	@Autowired
	Errors errors;
	
	@Autowired
	Metadata metadata;
	
	@Autowired
	EmployeeResultData employeeResultData;
	
	@Autowired
	FailureData failureData;
	
	@Autowired
	SuccessData successData;
	
	boolean success=true;
	boolean failure=false;

	@Override
	public EmployeeResult getAllUsers() {
		List<Employee> emp=new ArrayList<Employee>();
		emp=dao.getUsers();
		if(!emp.isEmpty()){
			metadata.setSuccess(success);
			metadata.setDescription("All Employees are:");
			metadata.setResponseId("TRA-"+"NX-"+UUID.randomUUID().toString());
			
			employeeResultData.setEmployee(emp);
			successData.setMetadata(metadata);
			successData.setEmployeeResultData(employeeResultData);
			
			return successData;
		}
		
		else{
			metadata.setSuccess(failure);
			metadata.setDescription("Data cannot be accessed");
			metadata.setResponseId("TRA-"+"NX-"+UUID.randomUUID().toString());
			errors.setCode("TRA1001");
			errors.setDescription("No data found");
			
			failureData.setErrors(errors);
			failureData.setMetadata(metadata);
			
			return failureData;
		}
		
	}

	@Override
	public EmployeeResult getAUser(int Emp_Id) {
		List<Employee> emp=new ArrayList<Employee>();
		Employee e=null;
		e=dao.getUser(Emp_Id);
		if(e!=null){
			emp.add(e);
			metadata.setSuccess(success);
			metadata.setDescription("All Employees are:");
			metadata.setResponseId("TRA-"+"NX-"+UUID.randomUUID().toString());
			
			employeeResultData.setEmployee(emp);
			successData.setMetadata(metadata);
			successData.setEmployeeResultData(employeeResultData);
			
			return successData;
		}
		
		else{
			metadata.setSuccess(failure);
			metadata.setDescription("Data cannot be accessed");
			metadata.setResponseId("TRA-"+"NX-"+UUID.randomUUID().toString());
			errors.setCode("TRA1002");
			errors.setDescription("No data found for this employee");
			
			failureData.setErrors(errors);
			failureData.setMetadata(metadata);
			
			return failureData;
		}
	}

	@Override
	public EmployeeResult update(Employee employee) {
		List<Employee> emp=new ArrayList<Employee>();
		Employee e=null;
		e=dao.update(employee);
		if(e!=null){
			emp.add(e);
			metadata.setSuccess(success);
			metadata.setDescription("All Employees are:");
			metadata.setResponseId("TRA-"+"NX-"+UUID.randomUUID().toString());
			
			employeeResultData.setEmployee(emp);
			successData.setMetadata(metadata);
			successData.setEmployeeResultData(employeeResultData);
			
			return successData;
		}
		
		else{
			metadata.setSuccess(failure);
			metadata.setDescription("Data cannot be accessed");
			metadata.setResponseId("TRA-"+"NX-"+UUID.randomUUID().toString());
			errors.setCode("TRA1003");
			errors.setDescription("Data not updated");
			
			failureData.setErrors(errors);
			failureData.setMetadata(metadata);
			
			return failureData;
		}
	}

	@Override
	public EmployeeResult insert(Employee employee) {
		List<Employee> emp=new ArrayList<Employee>();
		Employee e=null;
		e=dao.insert(employee);
		if(e!=null){
			emp.add(e);
			metadata.setSuccess(success);
			metadata.setDescription("All Employees are:");
			metadata.setResponseId("TRA-"+"NX-"+UUID.randomUUID().toString());
			
			employeeResultData.setEmployee(emp);
			successData.setMetadata(metadata);
			successData.setEmployeeResultData(employeeResultData);
			
			return successData;
		}
		
		else{
			metadata.setSuccess(failure);
			metadata.setDescription("Data cannot be accessed");
			metadata.setResponseId("TRA-"+"NX-"+UUID.randomUUID().toString());
			errors.setCode("TRA1004");
			errors.setDescription("Data not inserted");
			
			failureData.setErrors(errors);
			failureData.setMetadata(metadata);
			
			return failureData;
		}
	}

	@Override
	public EmployeeResult delete(int Emp_Id) {
		List<Employee> emp=new ArrayList<Employee>();
		Employee e=null;
		e=dao.delete(Emp_Id);
		if(e!=null){
			emp.add(e);
			metadata.setSuccess(success);
			metadata.setDescription("All Employees are:");
			metadata.setResponseId("TRA-"+"NX-"+UUID.randomUUID().toString());
			
			employeeResultData.setEmployee(emp);
			successData.setMetadata(metadata);
			successData.setEmployeeResultData(employeeResultData);
			
			return successData;
		}
		
		else{
			metadata.setSuccess(failure);
			metadata.setDescription("Data cannot be accessed");
			metadata.setResponseId("TRA-"+"NX-"+UUID.randomUUID().toString());
			errors.setCode("TRA1005");
			errors.setDescription("Data not deleted");
			
			failureData.setErrors(errors);
			failureData.setMetadata(metadata);
			
			return failureData;
		}
	}
	
}


				----controller---

package Employeecontroller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import Employeemodel.Employee;
import Employeemodel.wrapper.response.EmployeeResult;
import Employeeservice.EmployeeService;

@RestController
public class EmployeeController {
	
	@Autowired
	EmployeeService empService;
	
	@RequestMapping(value="/employees",method=RequestMethod.GET,produces="application/json")
	public EmployeeResult getAllEmp(){
		return empService.getAllUsers();
	}

	@RequestMapping(value="/employees/{Emp_Id}",method=RequestMethod.GET,produces="application/json")
	public EmployeeResult getAllEmp(@PathVariable("Emp_Id") int Emp_Id){
		return empService.getAUser(Emp_Id);
	}
	
	@RequestMapping(value="/employees",method=RequestMethod.POST,produces="application/json")
	public EmployeeResult insertEmp(@RequestBody Employee employee){
		return empService.insert(employee);
	}
	
	@RequestMapping(value="/employees",method=RequestMethod.PUT,produces="application/json")
	public EmployeeResult updateEmp(@RequestBody Employee employee){
		return empService.update(employee);
	}
	
	@RequestMapping(value="/employees/deletes/{Emp_Id}",method=RequestMethod.DELETE,produces="application/json")
	public EmployeeResult deleteEmp(@PathVariable("Emp_Id") int Emp_Id){
		return empService.delete(Emp_Id);
	}
}
